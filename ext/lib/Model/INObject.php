<?php
/**
 * INObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  Irisnet\APIV1\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Irisnet API
 *
 * Artificial Intelligence (AI) for image- and video-processing in realtime. This is an interactive documentation meant to give a place were you can quickly look up the endpoints and their schemas, while also giving you the option to try things out yourself.  Listed below you'll see the available endpoints of the API that can be expanded by clicking on it. Each expanded endpoint lists the request parameter (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail. Additionally you'll find a 'Try it out' button where you can type in your custom parameters and custom body and execute that against the API. The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. By clicking on the right arrow you can expand the model and it will show you a description of the model and the model parameters. For nested models you can keep clicking the right arrow to reveal further details on it.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Irisnet\APIV1\Client\Model;

use \ArrayAccess;
use \Irisnet\APIV1\Client\ObjectSerializer;

/**
 * INObject Class Doc Comment
 *
 * @category Class
 * @description Describes a rectangle that stretches around the recognized object. This is useful when redacting or blurring certain recognized objects. Each object contains the name of the classification and coordinates for a rectangle around the recognized object. The origin point (y &#x3D; 0.0, x &#x3D; 0.0) of the coordinate system is on the top left of the of the source material. The bottom right of the source is always y &#x3D; 1 and x &#x3D; 1.
 * @package  Irisnet\APIV1\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class INObject implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'INObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'in_class' => 'string',
        'in_group' => 'string',
        'in_id' => 'string',
        'content' => 'string',
        'color' => 'string',
        'style' => 'string',
        'x0' => 'float',
        'y0' => 'float',
        'width' => 'float',
        'height' => 'float',
        'probability' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'in_class' => null,
        'in_group' => null,
        'in_id' => null,
        'content' => null,
        'color' => null,
        'style' => null,
        'x0' => 'float',
        'y0' => 'float',
        'width' => 'float',
        'height' => 'float',
        'probability' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'in_class' => 'inClass',
        'in_group' => 'inGroup',
        'in_id' => 'inId',
        'content' => 'content',
        'color' => 'color',
        'style' => 'style',
        'x0' => 'x0',
        'y0' => 'y0',
        'width' => 'width',
        'height' => 'height',
        'probability' => 'probability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'in_class' => 'setInClass',
        'in_group' => 'setInGroup',
        'in_id' => 'setInId',
        'content' => 'setContent',
        'color' => 'setColor',
        'style' => 'setStyle',
        'x0' => 'setX0',
        'y0' => 'setY0',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'probability' => 'setProbability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'in_class' => 'getInClass',
        'in_group' => 'getInGroup',
        'in_id' => 'getInId',
        'content' => 'getContent',
        'color' => 'getColor',
        'style' => 'getStyle',
        'x0' => 'getX0',
        'y0' => 'getY0',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'probability' => 'getProbability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const COLOR_BLACK = 'black';
    const COLOR_BROWN = 'brown';
    const COLOR_BLONDE = 'blonde';
    const COLOR_GREY = 'grey';
    const COLOR_RED = 'red';
    const COLOR_OTHER = 'other';
    const STYLE_LONG_HAIRED = 'longHaired';
    const STYLE_SHORT_HAIRED = 'shortHaired';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getColorAllowableValues()
    {
        return [
            self::COLOR_BLACK,
            self::COLOR_BROWN,
            self::COLOR_BLONDE,
            self::COLOR_GREY,
            self::COLOR_RED,
            self::COLOR_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStyleAllowableValues()
    {
        return [
            self::STYLE_LONG_HAIRED,
            self::STYLE_SHORT_HAIRED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['in_class'] = isset($data['in_class']) ? $data['in_class'] : null;
        $this->container['in_group'] = isset($data['in_group']) ? $data['in_group'] : null;
        $this->container['in_id'] = isset($data['in_id']) ? $data['in_id'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['x0'] = isset($data['x0']) ? $data['x0'] : null;
        $this->container['y0'] = isset($data['y0']) ? $data['y0'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['probability'] = isset($data['probability']) ? $data['probability'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getColorAllowableValues();
        if (!is_null($this->container['color']) && !in_array($this->container['color'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'color', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStyleAllowableValues();
        if (!is_null($this->container['style']) && !in_array($this->container['style'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'style', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets in_class
     *
     * @return string|null
     */
    public function getInClass()
    {
        return $this->container['in_class'];
    }

    /**
     * Sets in_class
     *
     * @param string|null $in_class The classification of the recognized object.
     *
     * @return $this
     */
    public function setInClass($in_class)
    {
        $this->container['in_class'] = $in_class;

        return $this;
    }

    /**
     * Gets in_group
     *
     * @return string|null
     */
    public function getInGroup()
    {
        return $this->container['in_group'];
    }

    /**
     * Sets in_group
     *
     * @param string|null $in_group The group of the classification.
     *
     * @return $this
     */
    public function setInGroup($in_group)
    {
        $this->container['in_group'] = $in_group;

        return $this;
    }

    /**
     * Gets in_id
     *
     * @return string|null
     */
    public function getInId()
    {
        return $this->container['in_id'];
    }

    /**
     * Sets in_id
     *
     * @param string|null $in_id The object id
     *
     * @return $this
     */
    public function setInId($in_id)
    {
        $this->container['in_id'] = $in_id;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content The string content of the recognized text
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color The color of the object, e.g. the color of the hair. Is only available for certain classification objects. See list below:  * _hair_ - black, brown, blonde, grey, red, other
     *
     * @return $this
     */
    public function setColor($color)
    {
        $allowedValues = $this->getColorAllowableValues();
        if (!is_null($color) && !in_array($color, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'color', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string|null
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string|null $style The style attribute of the object, e.g. the style of the hair. Is only available for certain classification objects. See list below:  * _hair_ - longHaired, shortHaired
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $allowedValues = $this->getStyleAllowableValues();
        if (!is_null($style) && !in_array($style, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'style', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets x0
     *
     * @return float|null
     */
    public function getX0()
    {
        return $this->container['x0'];
    }

    /**
     * Sets x0
     *
     * @param float|null $x0 The center of the rectangle in the horizontal (x) direction.
     *
     * @return $this
     */
    public function setX0($x0)
    {
        $this->container['x0'] = $x0;

        return $this;
    }

    /**
     * Gets y0
     *
     * @return float|null
     */
    public function getY0()
    {
        return $this->container['y0'];
    }

    /**
     * Sets y0
     *
     * @param float|null $y0 The center of the rectangle in the vertical (y) direction.
     *
     * @return $this
     */
    public function setY0($y0)
    {
        $this->container['y0'] = $y0;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width The total width of the rectangle in the horizontal (x) direction. Use _x0 - width / 2_ and _x0 + width / 2_ to get the left and right edges of the rectangle.
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height The total height of the rectangle in the vertical (y) direction. Use _y0 - height / 2_ and _y0 + height / 2_ to get the top and bottom edges of the rectangle.
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets probability
     *
     * @return int|null
     */
    public function getProbability()
    {
        return $this->container['probability'];
    }

    /**
     * Sets probability
     *
     * @param int|null $probability The probability that the object found matches the classification.
     *
     * @return $this
     */
    public function setProbability($probability)
    {
        $this->container['probability'] = $probability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


