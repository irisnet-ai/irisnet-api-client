<?php
/**
 * AICheckOperationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Irisnet\APIV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Irisnet API
 *
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Irisnet\APIV2\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Irisnet\APIV2\Client\ApiException;
use Irisnet\APIV2\Client\Configuration;
use Irisnet\APIV2\Client\HeaderSelector;
use Irisnet\APIV2\Client\ObjectSerializer;

/**
 * AICheckOperationsApi Class Doc Comment
 *
 * @category Class
 * @package  Irisnet\APIV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AICheckOperationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'checkImage' => [
            'application/json',
        ],
        'checkStream' => [
            'application/json',
        ],
        'checkVideo' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkImage
     *
     * Check an image with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $url &lt;s&gt;The url to the image that needs to be checked.&lt;/s&gt; Deprecated: Use &#39;data&#39; parameter instead. &lt;b&gt;This parameter will be removed in future releases.&lt;/b&gt; (optional) (deprecated)
     * @param  string $data The http(s) url or base64 encoded data uri of the image that needs to be checked. (optional)
     * @param  int $detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows detections (e.g. _BaseDetection_ schema) that contains extended features to each found object. (optional, default to 1)
     * @param  bool $image_encode Specifies whether or not to draw an output image that will be delivered in the response body as base64 encoded string. The _Encoded_ schema will be available in the response. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkImage'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\CheckResult|\Irisnet\APIV2\Client\Model\ApiNotice
     */
    public function checkImage($config_id, $url = null, $data = null, $detail = 1, $image_encode = false, string $contentType = self::contentTypes['checkImage'][0])
    {
        list($response) = $this->checkImageWithHttpInfo($config_id, $url, $data, $detail, $image_encode, $contentType);
        return $response;
    }

    /**
     * Operation checkImageWithHttpInfo
     *
     * Check an image with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $url &lt;s&gt;The url to the image that needs to be checked.&lt;/s&gt; Deprecated: Use &#39;data&#39; parameter instead. &lt;b&gt;This parameter will be removed in future releases.&lt;/b&gt; (optional) (deprecated)
     * @param  string $data The http(s) url or base64 encoded data uri of the image that needs to be checked. (optional)
     * @param  int $detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows detections (e.g. _BaseDetection_ schema) that contains extended features to each found object. (optional, default to 1)
     * @param  bool $image_encode Specifies whether or not to draw an output image that will be delivered in the response body as base64 encoded string. The _Encoded_ schema will be available in the response. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkImage'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\CheckResult|\Irisnet\APIV2\Client\Model\ApiNotice, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkImageWithHttpInfo($config_id, $url = null, $data = null, $detail = 1, $image_encode = false, string $contentType = self::contentTypes['checkImage'][0])
    {
        $request = $this->checkImageRequest($config_id, $url, $data, $detail, $image_encode, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 404:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Irisnet\APIV2\Client\Model\CheckResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\CheckResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\CheckResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Irisnet\APIV2\Client\Model\CheckResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\CheckResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkImageAsync
     *
     * Check an image with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $url &lt;s&gt;The url to the image that needs to be checked.&lt;/s&gt; Deprecated: Use &#39;data&#39; parameter instead. &lt;b&gt;This parameter will be removed in future releases.&lt;/b&gt; (optional) (deprecated)
     * @param  string $data The http(s) url or base64 encoded data uri of the image that needs to be checked. (optional)
     * @param  int $detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows detections (e.g. _BaseDetection_ schema) that contains extended features to each found object. (optional, default to 1)
     * @param  bool $image_encode Specifies whether or not to draw an output image that will be delivered in the response body as base64 encoded string. The _Encoded_ schema will be available in the response. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkImageAsync($config_id, $url = null, $data = null, $detail = 1, $image_encode = false, string $contentType = self::contentTypes['checkImage'][0])
    {
        return $this->checkImageAsyncWithHttpInfo($config_id, $url, $data, $detail, $image_encode, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkImageAsyncWithHttpInfo
     *
     * Check an image with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $url &lt;s&gt;The url to the image that needs to be checked.&lt;/s&gt; Deprecated: Use &#39;data&#39; parameter instead. &lt;b&gt;This parameter will be removed in future releases.&lt;/b&gt; (optional) (deprecated)
     * @param  string $data The http(s) url or base64 encoded data uri of the image that needs to be checked. (optional)
     * @param  int $detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows detections (e.g. _BaseDetection_ schema) that contains extended features to each found object. (optional, default to 1)
     * @param  bool $image_encode Specifies whether or not to draw an output image that will be delivered in the response body as base64 encoded string. The _Encoded_ schema will be available in the response. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkImageAsyncWithHttpInfo($config_id, $url = null, $data = null, $detail = 1, $image_encode = false, string $contentType = self::contentTypes['checkImage'][0])
    {
        $returnType = '\Irisnet\APIV2\Client\Model\CheckResult';
        $request = $this->checkImageRequest($config_id, $url, $data, $detail, $image_encode, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkImage'
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $url &lt;s&gt;The url to the image that needs to be checked.&lt;/s&gt; Deprecated: Use &#39;data&#39; parameter instead. &lt;b&gt;This parameter will be removed in future releases.&lt;/b&gt; (optional) (deprecated)
     * @param  string $data The http(s) url or base64 encoded data uri of the image that needs to be checked. (optional)
     * @param  int $detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows detections (e.g. _BaseDetection_ schema) that contains extended features to each found object. (optional, default to 1)
     * @param  bool $image_encode Specifies whether or not to draw an output image that will be delivered in the response body as base64 encoded string. The _Encoded_ schema will be available in the response. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkImageRequest($config_id, $url = null, $data = null, $detail = 1, $image_encode = false, string $contentType = self::contentTypes['checkImage'][0])
    {

        // verify the required parameter 'config_id' is set
        if ($config_id === null || (is_array($config_id) && count($config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_id when calling checkImage'
            );
        }



        if ($detail !== null && $detail > 3) {
            throw new \InvalidArgumentException('invalid value for "$detail" when calling AICheckOperationsApi.checkImage, must be smaller than or equal to 3.');
        }
        if ($detail !== null && $detail < 0) {
            throw new \InvalidArgumentException('invalid value for "$detail" when calling AICheckOperationsApi.checkImage, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/v2/check-image/{configId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url,
            'url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data,
            'data', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $detail,
            'detail', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image_encode,
            'imageEncode', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('LICENSE-KEY');
        if ($apiKey !== null) {
            $headers['LICENSE-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkStream
     *
     * Check a stream with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $in_url The URL of the video stream that the AI should check. (required)
     * @param  string $out_url The URL of where the AI should send the encoded stream. (optional)
     * @param  int $cycle_length Determine how often (value in milliseconds) the the AI should give a feedback. (optional, default to 500)
     * @param  int $check_rate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkStream'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\CheckResult[]|\Irisnet\APIV2\Client\Model\ApiNotice
     */
    public function checkStream($config_id, $in_url, $out_url = null, $cycle_length = 500, $check_rate = 0, string $contentType = self::contentTypes['checkStream'][0])
    {
        list($response) = $this->checkStreamWithHttpInfo($config_id, $in_url, $out_url, $cycle_length, $check_rate, $contentType);
        return $response;
    }

    /**
     * Operation checkStreamWithHttpInfo
     *
     * Check a stream with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $in_url The URL of the video stream that the AI should check. (required)
     * @param  string $out_url The URL of where the AI should send the encoded stream. (optional)
     * @param  int $cycle_length Determine how often (value in milliseconds) the the AI should give a feedback. (optional, default to 500)
     * @param  int $check_rate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkStream'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\CheckResult[]|\Irisnet\APIV2\Client\Model\ApiNotice, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkStreamWithHttpInfo($config_id, $in_url, $out_url = null, $cycle_length = 500, $check_rate = 0, string $contentType = self::contentTypes['checkStream'][0])
    {
        $request = $this->checkStreamRequest($config_id, $in_url, $out_url, $cycle_length, $check_rate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 404:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Irisnet\APIV2\Client\Model\CheckResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\CheckResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\CheckResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Irisnet\APIV2\Client\Model\CheckResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\CheckResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkStreamAsync
     *
     * Check a stream with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $in_url The URL of the video stream that the AI should check. (required)
     * @param  string $out_url The URL of where the AI should send the encoded stream. (optional)
     * @param  int $cycle_length Determine how often (value in milliseconds) the the AI should give a feedback. (optional, default to 500)
     * @param  int $check_rate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkStreamAsync($config_id, $in_url, $out_url = null, $cycle_length = 500, $check_rate = 0, string $contentType = self::contentTypes['checkStream'][0])
    {
        return $this->checkStreamAsyncWithHttpInfo($config_id, $in_url, $out_url, $cycle_length, $check_rate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkStreamAsyncWithHttpInfo
     *
     * Check a stream with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $in_url The URL of the video stream that the AI should check. (required)
     * @param  string $out_url The URL of where the AI should send the encoded stream. (optional)
     * @param  int $cycle_length Determine how often (value in milliseconds) the the AI should give a feedback. (optional, default to 500)
     * @param  int $check_rate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkStreamAsyncWithHttpInfo($config_id, $in_url, $out_url = null, $cycle_length = 500, $check_rate = 0, string $contentType = self::contentTypes['checkStream'][0])
    {
        $returnType = '\Irisnet\APIV2\Client\Model\CheckResult[]';
        $request = $this->checkStreamRequest($config_id, $in_url, $out_url, $cycle_length, $check_rate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkStream'
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $in_url The URL of the video stream that the AI should check. (required)
     * @param  string $out_url The URL of where the AI should send the encoded stream. (optional)
     * @param  int $cycle_length Determine how often (value in milliseconds) the the AI should give a feedback. (optional, default to 500)
     * @param  int $check_rate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkStreamRequest($config_id, $in_url, $out_url = null, $cycle_length = 500, $check_rate = 0, string $contentType = self::contentTypes['checkStream'][0])
    {

        // verify the required parameter 'config_id' is set
        if ($config_id === null || (is_array($config_id) && count($config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_id when calling checkStream'
            );
        }

        // verify the required parameter 'in_url' is set
        if ($in_url === null || (is_array($in_url) && count($in_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $in_url when calling checkStream'
            );
        }


        if ($cycle_length !== null && $cycle_length < 100) {
            throw new \InvalidArgumentException('invalid value for "$cycle_length" when calling AICheckOperationsApi.checkStream, must be bigger than or equal to 100.');
        }
        
        if ($check_rate !== null && $check_rate < 0) {
            throw new \InvalidArgumentException('invalid value for "$check_rate" when calling AICheckOperationsApi.checkStream, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v2/check-stream/{configId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $in_url,
            'inUrl', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $out_url,
            'outUrl', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cycle_length,
            'cycleLength', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_rate,
            'checkRate', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/x-ndjson', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('LICENSE-KEY');
        if ($apiKey !== null) {
            $headers['LICENSE-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkVideo
     *
     * Check a video with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $url The url to the video that needs to be checked. (required)
     * @param  \Irisnet\APIV2\Client\Model\Config $config config (required)
     * @param  int $detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows events (_Event_ schema) that contains extended features to each found object. (optional, default to 1)
     * @param  bool $image_encode Specifies whether or not to draw an output video that can be downloaded afterwards. The _Encoded_ schema will be available in the response. (optional, default to false)
     * @param  int $check_rate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkVideo'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function checkVideo($config_id, $url, $config, $detail = 1, $image_encode = false, $check_rate = 0, string $contentType = self::contentTypes['checkVideo'][0])
    {
        $this->checkVideoWithHttpInfo($config_id, $url, $config, $detail, $image_encode, $check_rate, $contentType);
    }

    /**
     * Operation checkVideoWithHttpInfo
     *
     * Check a video with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $url The url to the video that needs to be checked. (required)
     * @param  \Irisnet\APIV2\Client\Model\Config $config (required)
     * @param  int $detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows events (_Event_ schema) that contains extended features to each found object. (optional, default to 1)
     * @param  bool $image_encode Specifies whether or not to draw an output video that can be downloaded afterwards. The _Encoded_ schema will be available in the response. (optional, default to false)
     * @param  int $check_rate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkVideo'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkVideoWithHttpInfo($config_id, $url, $config, $detail = 1, $image_encode = false, $check_rate = 0, string $contentType = self::contentTypes['checkVideo'][0])
    {
        $request = $this->checkVideoRequest($config_id, $url, $config, $detail, $image_encode, $check_rate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkVideoAsync
     *
     * Check a video with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $url The url to the video that needs to be checked. (required)
     * @param  \Irisnet\APIV2\Client\Model\Config $config (required)
     * @param  int $detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows events (_Event_ schema) that contains extended features to each found object. (optional, default to 1)
     * @param  bool $image_encode Specifies whether or not to draw an output video that can be downloaded afterwards. The _Encoded_ schema will be available in the response. (optional, default to false)
     * @param  int $check_rate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkVideo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkVideoAsync($config_id, $url, $config, $detail = 1, $image_encode = false, $check_rate = 0, string $contentType = self::contentTypes['checkVideo'][0])
    {
        return $this->checkVideoAsyncWithHttpInfo($config_id, $url, $config, $detail, $image_encode, $check_rate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkVideoAsyncWithHttpInfo
     *
     * Check a video with the AI.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $url The url to the video that needs to be checked. (required)
     * @param  \Irisnet\APIV2\Client\Model\Config $config (required)
     * @param  int $detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows events (_Event_ schema) that contains extended features to each found object. (optional, default to 1)
     * @param  bool $image_encode Specifies whether or not to draw an output video that can be downloaded afterwards. The _Encoded_ schema will be available in the response. (optional, default to false)
     * @param  int $check_rate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkVideo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkVideoAsyncWithHttpInfo($config_id, $url, $config, $detail = 1, $image_encode = false, $check_rate = 0, string $contentType = self::contentTypes['checkVideo'][0])
    {
        $returnType = '';
        $request = $this->checkVideoRequest($config_id, $url, $config, $detail, $image_encode, $check_rate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkVideo'
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $url The url to the video that needs to be checked. (required)
     * @param  \Irisnet\APIV2\Client\Model\Config $config (required)
     * @param  int $detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows events (_Event_ schema) that contains extended features to each found object. (optional, default to 1)
     * @param  bool $image_encode Specifies whether or not to draw an output video that can be downloaded afterwards. The _Encoded_ schema will be available in the response. (optional, default to false)
     * @param  int $check_rate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkVideo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkVideoRequest($config_id, $url, $config, $detail = 1, $image_encode = false, $check_rate = 0, string $contentType = self::contentTypes['checkVideo'][0])
    {

        // verify the required parameter 'config_id' is set
        if ($config_id === null || (is_array($config_id) && count($config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_id when calling checkVideo'
            );
        }

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling checkVideo'
            );
        }

        // verify the required parameter 'config' is set
        if ($config === null || (is_array($config) && count($config) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config when calling checkVideo'
            );
        }

        if ($detail !== null && $detail > 3) {
            throw new \InvalidArgumentException('invalid value for "$detail" when calling AICheckOperationsApi.checkVideo, must be smaller than or equal to 3.');
        }
        if ($detail !== null && $detail < 0) {
            throw new \InvalidArgumentException('invalid value for "$detail" when calling AICheckOperationsApi.checkVideo, must be bigger than or equal to 0.');
        }
        

        if ($check_rate !== null && $check_rate < 0) {
            throw new \InvalidArgumentException('invalid value for "$check_rate" when calling AICheckOperationsApi.checkVideo, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v2/check-video/{configId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url,
            'url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $detail,
            'detail', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image_encode,
            'imageEncode', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_rate,
            'checkRate', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($config)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($config));
            } else {
                $httpBody = $config;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('LICENSE-KEY');
        if ($apiKey !== null) {
            $headers['LICENSE-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
