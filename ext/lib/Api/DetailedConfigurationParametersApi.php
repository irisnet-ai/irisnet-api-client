<?php
/**
 * DetailedConfigurationParametersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Irisnet\APIV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Irisnet API
 *
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Irisnet\APIV2\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Irisnet\APIV2\Client\ApiException;
use Irisnet\APIV2\Client\Configuration;
use Irisnet\APIV2\Client\HeaderSelector;
use Irisnet\APIV2\Client\ObjectSerializer;

/**
 * DetailedConfigurationParametersApi Class Doc Comment
 *
 * @category Class
 * @package  Irisnet\APIV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DetailedConfigurationParametersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'clearParameters' => [
            'application/json',
        ],
        'getParameters' => [
            'application/json',
        ],
        'setParameters' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation clearParameters
     *
     * Delete the parameters of the AI configuration.
     *
     * @param  string $config_id The id of the configuration where the parameters should be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearParameters'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clearParameters($config_id, string $contentType = self::contentTypes['clearParameters'][0])
    {
        $this->clearParametersWithHttpInfo($config_id, $contentType);
    }

    /**
     * Operation clearParametersWithHttpInfo
     *
     * Delete the parameters of the AI configuration.
     *
     * @param  string $config_id The id of the configuration where the parameters should be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearParameters'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearParametersWithHttpInfo($config_id, string $contentType = self::contentTypes['clearParameters'][0])
    {
        $request = $this->clearParametersRequest($config_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clearParametersAsync
     *
     * Delete the parameters of the AI configuration.
     *
     * @param  string $config_id The id of the configuration where the parameters should be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearParameters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearParametersAsync($config_id, string $contentType = self::contentTypes['clearParameters'][0])
    {
        return $this->clearParametersAsyncWithHttpInfo($config_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearParametersAsyncWithHttpInfo
     *
     * Delete the parameters of the AI configuration.
     *
     * @param  string $config_id The id of the configuration where the parameters should be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearParameters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearParametersAsyncWithHttpInfo($config_id, string $contentType = self::contentTypes['clearParameters'][0])
    {
        $returnType = '';
        $request = $this->clearParametersRequest($config_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearParameters'
     *
     * @param  string $config_id The id of the configuration where the parameters should be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearParameters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clearParametersRequest($config_id, string $contentType = self::contentTypes['clearParameters'][0])
    {

        // verify the required parameter 'config_id' is set
        if ($config_id === null || (is_array($config_id) && count($config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_id when calling clearParameters'
            );
        }


        $resourcePath = '/v2/config/parameters/{configId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('LICENSE-KEY');
        if ($apiKey !== null) {
            $headers['LICENSE-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParameters
     *
     * Get the parameters of the AI configuration.
     *
     * @param  string $config_id The id of the configuration for which the parameters are being requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParameters'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Irisnet\APIV2\Client\Model\ParamSet|\Irisnet\APIV2\Client\Model\ApiNotice
     */
    public function getParameters($config_id, string $contentType = self::contentTypes['getParameters'][0])
    {
        list($response) = $this->getParametersWithHttpInfo($config_id, $contentType);
        return $response;
    }

    /**
     * Operation getParametersWithHttpInfo
     *
     * Get the parameters of the AI configuration.
     *
     * @param  string $config_id The id of the configuration for which the parameters are being requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParameters'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Irisnet\APIV2\Client\Model\ParamSet|\Irisnet\APIV2\Client\Model\ApiNotice, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParametersWithHttpInfo($config_id, string $contentType = self::contentTypes['getParameters'][0])
    {
        $request = $this->getParametersRequest($config_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Irisnet\APIV2\Client\Model\ParamSet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ParamSet' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ParamSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Irisnet\APIV2\Client\Model\ParamSet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ParamSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParametersAsync
     *
     * Get the parameters of the AI configuration.
     *
     * @param  string $config_id The id of the configuration for which the parameters are being requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParameters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParametersAsync($config_id, string $contentType = self::contentTypes['getParameters'][0])
    {
        return $this->getParametersAsyncWithHttpInfo($config_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParametersAsyncWithHttpInfo
     *
     * Get the parameters of the AI configuration.
     *
     * @param  string $config_id The id of the configuration for which the parameters are being requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParameters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParametersAsyncWithHttpInfo($config_id, string $contentType = self::contentTypes['getParameters'][0])
    {
        $returnType = '\Irisnet\APIV2\Client\Model\ParamSet';
        $request = $this->getParametersRequest($config_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParameters'
     *
     * @param  string $config_id The id of the configuration for which the parameters are being requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParameters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getParametersRequest($config_id, string $contentType = self::contentTypes['getParameters'][0])
    {

        // verify the required parameter 'config_id' is set
        if ($config_id === null || (is_array($config_id) && count($config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_id when calling getParameters'
            );
        }


        $resourcePath = '/v2/config/parameters/{configId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('LICENSE-KEY');
        if ($apiKey !== null) {
            $headers['LICENSE-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameters
     *
     * Set parameters to the given AI configuration.
     *
     * @param  string $config_id The id of the configuration where the parameters should be added. (required)
     * @param  \Irisnet\APIV2\Client\Model\ParamSet $param_set Define the parameters to use for an AI check operation. View the _ParamSet_ and _Param_ schema to see the available parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setParameters'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\ParamSet
     */
    public function setParameters($config_id, $param_set, string $contentType = self::contentTypes['setParameters'][0])
    {
        list($response) = $this->setParametersWithHttpInfo($config_id, $param_set, $contentType);
        return $response;
    }

    /**
     * Operation setParametersWithHttpInfo
     *
     * Set parameters to the given AI configuration.
     *
     * @param  string $config_id The id of the configuration where the parameters should be added. (required)
     * @param  \Irisnet\APIV2\Client\Model\ParamSet $param_set Define the parameters to use for an AI check operation. View the _ParamSet_ and _Param_ schema to see the available parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setParameters'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\ParamSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParametersWithHttpInfo($config_id, $param_set, string $contentType = self::contentTypes['setParameters'][0])
    {
        $request = $this->setParametersRequest($config_id, $param_set, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Irisnet\APIV2\Client\Model\ParamSet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ParamSet' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ParamSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Irisnet\APIV2\Client\Model\ParamSet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ParamSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParametersAsync
     *
     * Set parameters to the given AI configuration.
     *
     * @param  string $config_id The id of the configuration where the parameters should be added. (required)
     * @param  \Irisnet\APIV2\Client\Model\ParamSet $param_set Define the parameters to use for an AI check operation. View the _ParamSet_ and _Param_ schema to see the available parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setParameters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParametersAsync($config_id, $param_set, string $contentType = self::contentTypes['setParameters'][0])
    {
        return $this->setParametersAsyncWithHttpInfo($config_id, $param_set, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParametersAsyncWithHttpInfo
     *
     * Set parameters to the given AI configuration.
     *
     * @param  string $config_id The id of the configuration where the parameters should be added. (required)
     * @param  \Irisnet\APIV2\Client\Model\ParamSet $param_set Define the parameters to use for an AI check operation. View the _ParamSet_ and _Param_ schema to see the available parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setParameters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParametersAsyncWithHttpInfo($config_id, $param_set, string $contentType = self::contentTypes['setParameters'][0])
    {
        $returnType = '\Irisnet\APIV2\Client\Model\ParamSet';
        $request = $this->setParametersRequest($config_id, $param_set, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameters'
     *
     * @param  string $config_id The id of the configuration where the parameters should be added. (required)
     * @param  \Irisnet\APIV2\Client\Model\ParamSet $param_set Define the parameters to use for an AI check operation. View the _ParamSet_ and _Param_ schema to see the available parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setParameters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setParametersRequest($config_id, $param_set, string $contentType = self::contentTypes['setParameters'][0])
    {

        // verify the required parameter 'config_id' is set
        if ($config_id === null || (is_array($config_id) && count($config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_id when calling setParameters'
            );
        }

        // verify the required parameter 'param_set' is set
        if ($param_set === null || (is_array($param_set) && count($param_set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $param_set when calling setParameters'
            );
        }


        $resourcePath = '/v2/config/parameters/{configId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($param_set)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($param_set));
            } else {
                $httpBody = $param_set;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('LICENSE-KEY');
        if ($apiKey !== null) {
            $headers['LICENSE-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
