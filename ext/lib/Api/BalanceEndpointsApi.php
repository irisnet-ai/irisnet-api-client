<?php
/**
 * BalanceEndpointsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Irisnet\APIV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Irisnet API
 *
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Irisnet\APIV2\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Irisnet\APIV2\Client\ApiException;
use Irisnet\APIV2\Client\Configuration;
use Irisnet\APIV2\Client\HeaderSelector;
use Irisnet\APIV2\Client\ObjectSerializer;

/**
 * BalanceEndpointsApi Class Doc Comment
 *
 * @category Class
 * @package  Irisnet\APIV2\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BalanceEndpointsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCost' => [
            'application/json',
        ],
        'getLicenseInfo' => [
            'application/json',
        ],
        'getVideoCost' => [
            'application/json',
        ],
        'getVideoCost1' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCost
     *
     * Get the cost of the configuration for a single image.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCost'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\Pricing
     */
    public function getCost($config_id, string $contentType = self::contentTypes['getCost'][0])
    {
        list($response) = $this->getCostWithHttpInfo($config_id, $contentType);
        return $response;
    }

    /**
     * Operation getCostWithHttpInfo
     *
     * Get the cost of the configuration for a single image.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCost'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\Pricing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCostWithHttpInfo($config_id, string $contentType = self::contentTypes['getCost'][0])
    {
        $request = $this->getCostRequest($config_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 404:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Irisnet\APIV2\Client\Model\Pricing' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\Pricing' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\Pricing', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Irisnet\APIV2\Client\Model\Pricing';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\Pricing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCostAsync
     *
     * Get the cost of the configuration for a single image.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCostAsync($config_id, string $contentType = self::contentTypes['getCost'][0])
    {
        return $this->getCostAsyncWithHttpInfo($config_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCostAsyncWithHttpInfo
     *
     * Get the cost of the configuration for a single image.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCostAsyncWithHttpInfo($config_id, string $contentType = self::contentTypes['getCost'][0])
    {
        $returnType = '\Irisnet\APIV2\Client\Model\Pricing';
        $request = $this->getCostRequest($config_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCost'
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCostRequest($config_id, string $contentType = self::contentTypes['getCost'][0])
    {

        // verify the required parameter 'config_id' is set
        if ($config_id === null || (is_array($config_id) && count($config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_id when calling getCost'
            );
        }


        $resourcePath = '/v2/cost/{configId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('LICENSE-KEY');
        if ($apiKey !== null) {
            $headers['LICENSE-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLicenseInfo
     *
     * Get information for the given license key.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLicenseInfo'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\LicenseInfo
     */
    public function getLicenseInfo(string $contentType = self::contentTypes['getLicenseInfo'][0])
    {
        list($response) = $this->getLicenseInfoWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getLicenseInfoWithHttpInfo
     *
     * Get information for the given license key.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLicenseInfo'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\LicenseInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLicenseInfoWithHttpInfo(string $contentType = self::contentTypes['getLicenseInfo'][0])
    {
        $request = $this->getLicenseInfoRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 404:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Irisnet\APIV2\Client\Model\LicenseInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\LicenseInfo' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\LicenseInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Irisnet\APIV2\Client\Model\LicenseInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\LicenseInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLicenseInfoAsync
     *
     * Get information for the given license key.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLicenseInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLicenseInfoAsync(string $contentType = self::contentTypes['getLicenseInfo'][0])
    {
        return $this->getLicenseInfoAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLicenseInfoAsyncWithHttpInfo
     *
     * Get information for the given license key.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLicenseInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLicenseInfoAsyncWithHttpInfo(string $contentType = self::contentTypes['getLicenseInfo'][0])
    {
        $returnType = '\Irisnet\APIV2\Client\Model\LicenseInfo';
        $request = $this->getLicenseInfoRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLicenseInfo'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLicenseInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLicenseInfoRequest(string $contentType = self::contentTypes['getLicenseInfo'][0])
    {


        $resourcePath = '/v2/info/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('LICENSE-KEY');
        if ($apiKey !== null) {
            $headers['LICENSE-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVideoCost
     *
     * Get the cost of the configuration for moving images.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  int $frames The number of frames that the AI should check. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideoCost'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\Pricing|\Irisnet\APIV2\Client\Model\ApiNotice
     */
    public function getVideoCost($config_id, $frames, string $contentType = self::contentTypes['getVideoCost'][0])
    {
        list($response) = $this->getVideoCostWithHttpInfo($config_id, $frames, $contentType);
        return $response;
    }

    /**
     * Operation getVideoCostWithHttpInfo
     *
     * Get the cost of the configuration for moving images.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  int $frames The number of frames that the AI should check. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideoCost'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\Pricing|\Irisnet\APIV2\Client\Model\ApiNotice, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVideoCostWithHttpInfo($config_id, $frames, string $contentType = self::contentTypes['getVideoCost'][0])
    {
        $request = $this->getVideoCostRequest($config_id, $frames, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 404:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Irisnet\APIV2\Client\Model\Pricing' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\Pricing' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\Pricing', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Irisnet\APIV2\Client\Model\Pricing';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\Pricing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVideoCostAsync
     *
     * Get the cost of the configuration for moving images.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  int $frames The number of frames that the AI should check. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideoCost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVideoCostAsync($config_id, $frames, string $contentType = self::contentTypes['getVideoCost'][0])
    {
        return $this->getVideoCostAsyncWithHttpInfo($config_id, $frames, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVideoCostAsyncWithHttpInfo
     *
     * Get the cost of the configuration for moving images.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  int $frames The number of frames that the AI should check. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideoCost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVideoCostAsyncWithHttpInfo($config_id, $frames, string $contentType = self::contentTypes['getVideoCost'][0])
    {
        $returnType = '\Irisnet\APIV2\Client\Model\Pricing';
        $request = $this->getVideoCostRequest($config_id, $frames, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVideoCost'
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  int $frames The number of frames that the AI should check. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideoCost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVideoCostRequest($config_id, $frames, string $contentType = self::contentTypes['getVideoCost'][0])
    {

        // verify the required parameter 'config_id' is set
        if ($config_id === null || (is_array($config_id) && count($config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_id when calling getVideoCost'
            );
        }

        // verify the required parameter 'frames' is set
        if ($frames === null || (is_array($frames) && count($frames) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $frames when calling getVideoCost'
            );
        }


        $resourcePath = '/v2/cost/{configId}/{frames}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($config_id),
                $resourcePath
            );
        }
        // path params
        if ($frames !== null) {
            $resourcePath = str_replace(
                '{' . 'frames' . '}',
                ObjectSerializer::toPathValue($frames),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('LICENSE-KEY');
        if ($apiKey !== null) {
            $headers['LICENSE-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVideoCost1
     *
     * Get the cost of the configuration for moving images.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  int $fps The frames per second of the video or stream. (required)
     * @param  int $duration The duration in seconds of the video or stream. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideoCost1'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\Pricing
     */
    public function getVideoCost1($config_id, $fps, $duration, string $contentType = self::contentTypes['getVideoCost1'][0])
    {
        list($response) = $this->getVideoCost1WithHttpInfo($config_id, $fps, $duration, $contentType);
        return $response;
    }

    /**
     * Operation getVideoCost1WithHttpInfo
     *
     * Get the cost of the configuration for moving images.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  int $fps The frames per second of the video or stream. (required)
     * @param  int $duration The duration in seconds of the video or stream. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideoCost1'] to see the possible values for this operation
     *
     * @throws \Irisnet\APIV2\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\ApiNotice|\Irisnet\APIV2\Client\Model\Pricing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVideoCost1WithHttpInfo($config_id, $fps, $duration, string $contentType = self::contentTypes['getVideoCost1'][0])
    {
        $request = $this->getVideoCost1Request($config_id, $fps, $duration, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 404:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Irisnet\APIV2\Client\Model\ApiNotice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\ApiNotice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\ApiNotice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Irisnet\APIV2\Client\Model\Pricing' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Irisnet\APIV2\Client\Model\Pricing' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Irisnet\APIV2\Client\Model\Pricing', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Irisnet\APIV2\Client\Model\Pricing';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\ApiNotice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Irisnet\APIV2\Client\Model\Pricing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVideoCost1Async
     *
     * Get the cost of the configuration for moving images.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  int $fps The frames per second of the video or stream. (required)
     * @param  int $duration The duration in seconds of the video or stream. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideoCost1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVideoCost1Async($config_id, $fps, $duration, string $contentType = self::contentTypes['getVideoCost1'][0])
    {
        return $this->getVideoCost1AsyncWithHttpInfo($config_id, $fps, $duration, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVideoCost1AsyncWithHttpInfo
     *
     * Get the cost of the configuration for moving images.
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  int $fps The frames per second of the video or stream. (required)
     * @param  int $duration The duration in seconds of the video or stream. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideoCost1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVideoCost1AsyncWithHttpInfo($config_id, $fps, $duration, string $contentType = self::contentTypes['getVideoCost1'][0])
    {
        $returnType = '\Irisnet\APIV2\Client\Model\Pricing';
        $request = $this->getVideoCost1Request($config_id, $fps, $duration, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVideoCost1'
     *
     * @param  string $config_id The configuration id from the Basic Configuration operations. (required)
     * @param  int $fps The frames per second of the video or stream. (required)
     * @param  int $duration The duration in seconds of the video or stream. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideoCost1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVideoCost1Request($config_id, $fps, $duration, string $contentType = self::contentTypes['getVideoCost1'][0])
    {

        // verify the required parameter 'config_id' is set
        if ($config_id === null || (is_array($config_id) && count($config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_id when calling getVideoCost1'
            );
        }

        // verify the required parameter 'fps' is set
        if ($fps === null || (is_array($fps) && count($fps) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fps when calling getVideoCost1'
            );
        }

        // verify the required parameter 'duration' is set
        if ($duration === null || (is_array($duration) && count($duration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $duration when calling getVideoCost1'
            );
        }


        $resourcePath = '/v2/cost/{configId}/{fps}/{duration}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($config_id),
                $resourcePath
            );
        }
        // path params
        if ($fps !== null) {
            $resourcePath = str_replace(
                '{' . 'fps' . '}',
                ObjectSerializer::toPathValue($fps),
                $resourcePath
            );
        }
        // path params
        if ($duration !== null) {
            $resourcePath = str_replace(
                '{' . 'duration' . '}',
                ObjectSerializer::toPathValue($duration),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('LICENSE-KEY');
        if ($apiKey !== null) {
            $headers['LICENSE-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
